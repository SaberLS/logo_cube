.cube-container {
  /* height and width of cube's single face */
  --size: 20vh;

  /* height and width of unfolded cube */
  --max-height: calc(var(--size) * 3);
  --max-width: calc(var(--size) * 4);

  /* Used to center cube container on the screen */
  --margin-Y: calc(var(--max-height) / 2);
  --margin-X: calc(var(--max-width) / 2.5);

  /* center cube inside cub-container */
  /* distances between unfolded cube center face and cube-container border */
  /* there is one face on the left from cube center in unfolded cube */
  --left: var(--size);
  /* there are two face's from cube center in unfolded cube */
  --right: calc(var(--size) * -1);
  --top: var(--size);
  --bottom: calc(var(--size) * -1);

  /* transparency of cube's faces */
  --alpha: 0.65;

  /* original svgs are black so inver their colors to look better */
  --invert-color: invert(100%);

  /* url to backlight svg filter */
  --backlight: url('#backlight');
  /* url to logo backlight svg filter */
  --backlight-logo: url('#backlight-logo');

  /* cube is positioned relative to the viewport */
  position: fixed;

  /* unfolded cube size */
  height: var(--max-height);
  width: var(--max-width);
}

.cube-backlight {
  position: relative;
  left: var(--left);
  top: var(--top);
  filter: var(--backlight);
  height: var(--size);
  width: var(--size);
}

.cube {
  /* cover all given space */
  height: 100%;
  width: 100%;

  /* children preserve their 3d position */
  transform-style: preserve-3d;
  /* all transforms are relative to the center of the cube */
  transform-origin: center;
  /* default transform */
  transform: rotateX(0deg) rotateY(0deg);
  /* pointer event from children */
  pointer-events: none;
  /* cube folding transition */
  transition: transform 0.8s 50ms linear;
}

.rotate {
  animation: rotate 10s infinite linear;
}

@keyframes rotate {
  0% {
    transform: rotateX(0deg) rotateY(0deg);
  }

  100% {
    transform: rotateX(360deg) rotateY(360deg);
  }
}
